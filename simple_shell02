#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
/*
* function:simple_shell02
* Author: Moshe Matabologa and Onkabetsi
*
*/

#define MAX_BUFFER_SIZE 1024
#define MAX_ARG_SIZE 64

void execute_command(char *args[]) {
    pid_t pid, wpid;
    int status;

    pid = fork();
    if (pid == 0) {
        // Child process
        if (execvp(args[0], args) == -1) {
            perror("shell");
        }
        exit(EXIT_FAILURE);
    } else if (pid < 0) {
        // Error forking
        perror("shell");
    } else {
        // Parent process
        do {
            wpid = waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }
}

int parse_input(char *input, char *args[]) {
    int count = 0;
    char *token;

    token = strtok(input, " \t\n\r");
    while (token != NULL) {
        args[count++] = token;
        token = strtok(NULL, " \t\n\r");
    }
    args[count] = NULL; // Null-terminate the array

    return count;
}

int main(void) {
    char input[MAX_BUFFER_SIZE];
    char *args[MAX_ARG_SIZE];
    int arg_count;

    while (1) {
        // Print prompt
        printf("simple_shell$ ");

        // Read input
        if (fgets(input, sizeof(input), stdin) == NULL) {
            perror("fgets");
            exit(EXIT_FAILURE);
        }

        // Remove newline character
        input[strcspn(input, "\n")] = '\0';

        // Parse input into arguments
        arg_count = parse_input(input, args);

        // Check for exit command
        if (arg_count > 0 && strcmp(args[0], "exit") == 0) {
            break;
        }

        // Execute command
        if (arg_count > 0) {
            execute_command(args);
        }
    }

    return 0;
}
